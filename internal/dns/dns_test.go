package dns

import (
	"testing"

	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/stretchr/testify/assert"
)

var testDecodeOptions = gopacket.DecodeOptions{
	SkipDecodeRecovery: true,
}

func TestFilterDNSPacket(t *testing.T) {
	tests := []struct {
		name     string
		packet   []byte
		layer    layers.LinkType
		expected *DNS
	}{
		{
			name: "filter dns type of question TXT",
			// taken from https://github.com/google/gopacket/blob/master/layers/dns_test.go
			packet: []byte{
				0x02, 0x00, 0x00, 0x00, // PF_INET
				0x45, 0x00, 0x00, 0x73, 0x00, 0x00, 0x40, 0x00, 0x39, 0x11, 0x64, 0x98, 0xd0, 0x43, 0xde, 0xde,
				0x0a, 0xba, 0x23, 0x06, 0x00, 0x35, 0x81, 0xb2, 0x00, 0x5f, 0xdc, 0xb5, 0x98, 0x71, 0x81, 0x80,
				0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03,
				0x63, 0x6f, 0x6d, 0x00, 0x00, 0x10, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00,
				0x0e, 0x10, 0x00, 0x24, 0x23, 0x76, 0x3d, 0x73, 0x70, 0x66, 0x31, 0x20, 0x69, 0x6e, 0x63, 0x6c,
				0x75, 0x64, 0x65, 0x3a, 0x5f, 0x73, 0x70, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
				0x63, 0x6f, 0x6d, 0x20, 0x7e, 0x61, 0x6c, 0x6c, 0x00, 0x00, 0x29, 0x10, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00,
			},
			layer: layers.LinkTypeNull,
		},
		{
			name: "packet from a query, no answers",
			// taken from https://github.com/google/gopacket/blob/master/layers/dns_test.go
			packet: []byte{
				0x00, 0x90, 0x0b, 0x12, 0x91, 0xc1, 0x00, 0x1c, 0xc0, 0x93, 0x33, 0xfb, 0x08, 0x00, 0x45, 0x00,
				0x00, 0x5A, 0xce, 0x58, 0x00, 0x00, 0x40, 0x11, 0x67, 0xe2, 0xac, 0x10, 0x01, 0xc7, 0x4b, 0x4b,
				0x4b, 0x4b, 0xd6, 0x00, 0x00, 0x35, 0x00, 0x46, 0x44, 0xb0, 0x50, 0x12, 0x01, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x77, 0x77, 0x77, 0x04, 0x69, 0x65, 0x74, 0x66, 0x03,
				0x6f, 0x72, 0x67, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x29, 0x10, 0x00, 0x00, 0x00, 0x80,
				0x00, 0x00, 0x13, 0x69, 0x42, 0x00, 0x0F, 0x4F, 0x70, 0x65, 0x6E, 0x44, 0x4E, 0x53, 0x01, 0x23,
				0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
			},
			layer: layers.LinkTypeEthernet,
		},
		{
			name: "correct with 2 answers, CNAME + A",
			// dig fonts.gstatic.com, CNAME + A
			packet: []byte{
				0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0xd3, 0x40, 0xd2, 0xc1, 0x11, 0x24, 0xd7, 0x72, 0x08, 0x00,
				0x45, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11, 0xf7, 0x08, 0xc0, 0xa8, 0x01, 0x01,
				0xc0, 0xa8, 0x01, 0x20, 0x00, 0x35, 0xa4, 0x6e, 0x00, 0x5f, 0xf1, 0x8b, 0xe8, 0x1b, 0x81, 0x80,
				0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x05, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x07, 0x67,
				0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0,
				0x0c, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x18, 0x0c, 0x67, 0x73, 0x74, 0x61,
				0x74, 0x69, 0x63, 0x61, 0x64, 0x73, 0x73, 0x6c, 0x01, 0x6c, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
				0x65, 0xc0, 0x1a, 0xc0, 0x2f, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x04, 0xd8,
				0x3a, 0xce, 0xe3,
			},
			layer: layers.LinkTypeLinuxSLL,
			expected: &DNS{
				Query:  "fonts.gstatic.com",
				Answer: []byte{216, 58, 206, 227},
				Type:   layers.DNSTypeA,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			p := gopacket.NewPacket(tt.packet, tt.layer, testDecodeOptions)
			dns := filterDNSPacket(p)
			assert.Equal(t, tt.expected, dns)
		})
	}
}
